#!/usr/bin/env python3
"""
üé≠ Voice Shapeshifter - Simplified TTS Demo
U≈ºywa edge-tts dla ≈Çatwej instalacji i szybkiego startu!
"""

import asyncio
import edge_tts
import pygame
import os
import tempfile
from pathlib import Path

# Lista dostƒôpnych g≈Ços√≥w
VOICES = {
    "PL-Marek": "pl-PL-MarekNeural",
    "PL-Zofia": "pl-PL-ZofiaNeural", 
    "EN-Guy": "en-US-GuyNeural",
    "EN-Jenny": "en-US-JennyNeural",
    "EN-Aria": "en-US-AriaNeural",
    "FR-Henri": "fr-FR-HenriNeural",
    "DE-Conrad": "de-DE-ConradNeural",
    "ES-Alvaro": "es-ES-AlvaroNeural",
    "IT-Diego": "it-IT-DiegoNeural",
    "JP-Nanami": "ja-JP-NanamiNeural",
    "KR-SunHi": "ko-KR-SunHiNeural",
    "CN-Xiaoxiao": "zh-CN-XiaoxiaoNeural"
}

# Style m√≥wienia
STYLES = {
    "normal": "",
    "cheerful": "style='cheerful'",
    "sad": "style='sad'",
    "angry": "style='angry'",
    "excited": "style='excited'",
    "friendly": "style='friendly'",
    "hopeful": "style='hopeful'",
    "shouting": "style='shouting'",
    "whispering": "style='whispering'",
    "terrified": "style='terrified'",
    "unfriendly": "style='unfriendly'"
}

async def text_to_speech(text, voice, style="normal", rate="+0%", pitch="+0Hz"):
    """Konwertuj tekst na mowƒô z r√≥≈ºnymi parametrami"""
    
    # Przygotuj SSML je≈õli styl jest wybrany
    if style != "normal" and STYLES[style]:
        ssml_text = f"<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xml:lang='en-US'>"
        ssml_text += f"<voice name='{voice}'>"
        ssml_text += f"<prosody rate='{rate}' pitch='{pitch}'>"
        ssml_text += f"<mstts:express-as {STYLES[style]}>{text}</mstts:express-as>"
        ssml_text += "</prosody></voice></speak>"
        communicate = edge_tts.Communicate(ssml_text, voice)
    else:
        # Zwyk≈Çy tekst z parametrami
        communicate = edge_tts.Communicate(text, voice, rate=rate, pitch=pitch)
    
    # Zapisz do pliku tymczasowego
    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmp_file:
        tmp_path = tmp_file.name
        
    await communicate.save(tmp_path)
    return tmp_path

def play_audio(file_path):
    """Odtw√≥rz plik audio"""
    pygame.mixer.init()
    pygame.mixer.music.load(file_path)
    pygame.mixer.music.play()
    
    # Czekaj a≈º sko≈Ñczy graƒá
    while pygame.mixer.music.get_busy():
        pygame.time.Clock().tick(10)
    
    # Usu≈Ñ plik tymczasowy
    os.unlink(file_path)

async def demo():
    """G≈Ç√≥wne demo"""
    print("üé≠ VOICE SHAPESHIFTER - Edge TTS Demo")
    print("=" * 50)
    print("\nüì¢ Dostƒôpne g≈Çosy:")
    
    for name, voice_id in VOICES.items():
        print(f"  ‚Ä¢ {name}: {voice_id}")
    
    print("\nüé® Dostƒôpne style:")
    for style in STYLES.keys():
        print(f"  ‚Ä¢ {style}")
    
    print("\n" + "=" * 50)
    
    # Demo 1: R√≥≈ºne g≈Çosy
    print("\nüé§ DEMO 1: R√≥≈ºne g≈Çosy m√≥wiƒÖce to samo")
    text = "Cze≈õƒá! Jestem Voice Shapeshifter. Potrafiƒô m√≥wiƒá r√≥≈ºnymi g≈Çosami!"
    
    for name, voice in list(VOICES.items())[:4]:  # Pierwsze 4 g≈Çosy
        print(f"\n  ‚Üí G≈Ços: {name}")
        audio_file = await text_to_speech(text, voice)
        print(f"  ‚úÖ Wygenerowano: {name}.mp3")
        # play_audio(audio_file)  # Odkomentuj ≈ºeby ods≈Çuchaƒá
    
    # Demo 2: R√≥≈ºne emocje
    print("\n\nüé≠ DEMO 2: Ten sam g≈Ços, r√≥≈ºne emocje")
    voice = VOICES["EN-Jenny"]
    text = "This is amazing! I can speak with different emotions!"
    
    for style in ["normal", "cheerful", "sad", "excited", "whispering"]:
        print(f"\n  ‚Üí Styl: {style}")
        audio_file = await text_to_speech(text, voice, style=style)
        print(f"  ‚úÖ Wygenerowano: {style}.mp3")
        # play_audio(audio_file)  # Odkomentuj ≈ºeby ods≈Çuchaƒá
    
    # Demo 3: Pitch i prƒôdko≈õƒá
    print("\n\nüîß DEMO 3: Modyfikacja g≈Çosu (pitch & speed)")
    voice = VOICES["PL-Marek"]
    text = "Mogƒô m√≥wiƒá wysoko, nisko, szybko lub wolno!"
    
    variations = [
        ("normalny", "+0%", "+0Hz"),
        ("szybki", "+50%", "+0Hz"),
        ("wolny", "-30%", "+0Hz"),
        ("wysoki", "+0%", "+5Hz"),
        ("niski", "+0%", "-5Hz"),
        ("chipmunk", "+30%", "+8Hz"),
        ("demon", "-20%", "-8Hz")
    ]
    
    for name, rate, pitch in variations:
        print(f"\n  ‚Üí Wariacja: {name} (rate={rate}, pitch={pitch})")
        audio_file = await text_to_speech(text, voice, rate=rate, pitch=pitch)
        print(f"  ‚úÖ Wygenerowano: {name}.mp3")
        # play_audio(audio_file)  # Odkomentuj ≈ºeby ods≈Çuchaƒá
    
    # Demo 4: Multi-language
    print("\n\nüåç DEMO 4: Wielojƒôzyczno≈õƒá")
    
    multilang = [
        ("Polski", VOICES["PL-Zofia"], "Witaj ≈õwiecie! To jest niesamowite!"),
        ("English", VOICES["EN-Guy"], "Hello world! This is amazing!"),
        ("Fran√ßais", VOICES["FR-Henri"], "Bonjour le monde! C'est incroyable!"),
        ("Deutsch", VOICES["DE-Conrad"], "Hallo Welt! Das ist unglaublich!"),
        ("Êó•Êú¨Ë™û", VOICES["JP-Nanami"], "„Åì„Çì„Å´„Å°„ÅØ‰∏ñÁïåÔºÅ„Åì„Çå„ÅØÁ¥†Êô¥„Çâ„Åó„ÅÑ„Åß„ÅôÔºÅ")
    ]
    
    for lang, voice, text in multilang:
        print(f"\n  ‚Üí {lang}: {text}")
        audio_file = await text_to_speech(text, voice)
        print(f"  ‚úÖ Wygenerowano: {lang}.mp3")
        # play_audio(audio_file)  # Odkomentuj ≈ºeby ods≈Çuchaƒá
    
    print("\n\n‚ú® Demo zako≈Ñczone!")
    print("üí° Odkomentuj play_audio() w kodzie ≈ºeby ods≈Çuchaƒá wygenerowane pliki")

async def interactive_mode():
    """Tryb interaktywny"""
    print("\nüéÆ TRYB INTERAKTYWNY")
    print("=" * 50)
    
    while True:
        print("\nüìù Wpisz tekst (lub 'quit' ≈ºeby wyj≈õƒá):")
        text = input("> ")
        
        if text.lower() == 'quit':
            break
            
        print("\nüé§ Wybierz g≈Ços:")
        for i, (name, _) in enumerate(VOICES.items()):
            print(f"  {i+1}. {name}")
        
        try:
            choice = int(input("> ")) - 1
            voice_name = list(VOICES.keys())[choice]
            voice = VOICES[voice_name]
        except:
            print("‚ùå Nieprawid≈Çowy wyb√≥r, u≈ºywam domy≈õlnego")
            voice = VOICES["PL-Marek"]
        
        print("\nüé® Wybierz styl (Enter dla normalnego):")
        for style in STYLES.keys():
            print(f"  ‚Ä¢ {style}")
        
        style_choice = input("> ").strip() or "normal"
        if style_choice not in STYLES:
            style_choice = "normal"
        
        print("\n‚è≥ Generujƒô...")
        audio_file = await text_to_speech(text, voice, style=style_choice)
        print("‚úÖ Gotowe! Odtwarzam...")
        
        play_audio(audio_file)

if __name__ == "__main__":
    print("üé≠ VOICE SHAPESHIFTER - Simplified Edition")
    print("U≈ºywa Edge-TTS dla ≈Çatwej instalacji!")
    print("\nWybierz tryb:")
    print("1. Demo automatyczne")
    print("2. Tryb interaktywny")
    
    choice = input("\nWyb√≥r (1/2): ")
    
    if choice == "2":
        asyncio.run(interactive_mode())
    else:
        asyncio.run(demo())